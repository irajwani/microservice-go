{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["file:///Users/IRajwani/code/web/systems/evolut/services/api.ts"],"sourcesContent":["export interface AccountEntry {\n  currency: string;\n  balance: number;\n}\n\nexport interface AccountsResponse {\n  user_id: string;\n  accounts: AccountEntry[];\n  [k: string]: unknown;\n}\n\nconst apiGatewayId = process.env.API_GATEWAY_ID;\nconst base = process.env.API_BASE_URL || \"http://localhost:4566\";\n\nif (!apiGatewayId) {\n  // Intentionally not throwing; caller can decide fallback.\n  console.warn(\"API_GATEWAY_ID is not set in environment\");\n}\n\n// Construct base URL for REST API (assuming 'dev' stage)\nconst stage = \"dev\";\nconst root = `${base}/restapis/${apiGatewayId}/${stage}/_user_request_`;\n\nasync function http<T>(path: string, init?: RequestInit): Promise<T> {\n  const url = `${root}${path}`;\n  const res = await fetch(url, { ...init, headers: { 'Content-Type': 'application/json', ...(init?.headers || {}) } });\n  if (!res.ok) {\n    const text = await res.text();\n    throw new Error(`API ${res.status} ${res.statusText}: ${text}`);\n  }\n  return res.json() as Promise<T>;\n}\n\nexport async function fetchAccounts(userId: string): Promise<AccountsResponse> {\n  return http<AccountsResponse>(`/balances?user_id=${encodeURIComponent(userId)}`);\n}\n\n// --- Jobs (currency conversion) ---\nexport interface ConversionJobRequest {\n  client_id: string;\n  source_currency: string;\n  target_currency: string;\n  source_amount: number;\n}\n\nexport interface ConversionJobResponse extends ConversionJobRequest {\n  job_id: string;\n  status: string; // queued | processing | completed | failed\n  created_at: string;\n  [k: string]: unknown;\n}\n\nexport async function createConversionJob(body: ConversionJobRequest): Promise<ConversionJobResponse> {\n  return http<ConversionJobResponse>(`/jobs`, { method: 'POST', body: JSON.stringify(body) });\n}\n\n// --- Transactions (Jobs History) ---\nexport interface Transaction {\n  job_id: string;\n  client_id: string;\n  source_currency: string;\n  target_currency: string;\n  source_amount: number;\n  target_amount: number;\n  rate: number;\n  fee: number;\n  status: string;\n  created_at: string;\n  completed_at?: string;\n}\n\nexport interface TransactionsResponse {\n  user_id: string;\n  jobs: Transaction[];\n}\n\nexport async function fetchTransactions(userId: string, limit: number = 10): Promise<TransactionsResponse> {\n  return http<TransactionsResponse>(`/jobs?user_id=${encodeURIComponent(userId)}&limit=${limit}`);\n}\n"],"names":[],"mappings":";;;;;;;;AAWA,MAAM,eAAe,QAAQ,GAAG,CAAC,cAAc;AAC/C,MAAM,OAAO,QAAQ,GAAG,CAAC,YAAY,IAAI;AAEzC,IAAI,CAAC,cAAc;IACjB,0DAA0D;IAC1D,QAAQ,IAAI,CAAC;AACf;AAEA,yDAAyD;AACzD,MAAM,QAAQ;AACd,MAAM,OAAO,GAAG,KAAK,UAAU,EAAE,aAAa,CAAC,EAAE,MAAM,eAAe,CAAC;AAEvE,eAAe,KAAQ,IAAY,EAAE,IAAkB;IACrD,MAAM,MAAM,GAAG,OAAO,MAAM;IAC5B,MAAM,MAAM,MAAM,MAAM,KAAK;QAAE,GAAG,IAAI;QAAE,SAAS;YAAE,gBAAgB;YAAoB,GAAI,MAAM,WAAW,CAAC,CAAC;QAAE;IAAE;IAClH,IAAI,CAAC,IAAI,EAAE,EAAE;QACX,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE,IAAI,UAAU,CAAC,EAAE,EAAE,MAAM;IAChE;IACA,OAAO,IAAI,IAAI;AACjB;AAEO,eAAe,cAAc,MAAc;IAChD,OAAO,KAAuB,CAAC,kBAAkB,EAAE,mBAAmB,SAAS;AACjF;AAiBO,eAAe,oBAAoB,IAA0B;IAClE,OAAO,KAA4B,CAAC,KAAK,CAAC,EAAE;QAAE,QAAQ;QAAQ,MAAM,KAAK,SAAS,CAAC;IAAM;AAC3F;AAsBO,eAAe,kBAAkB,MAAc,EAAE,QAAgB,EAAE;IACxE,OAAO,KAA2B,CAAC,cAAc,EAAE,mBAAmB,QAAQ,OAAO,EAAE,OAAO;AAChG","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/IRajwani/code/web/systems/evolut/app/api/jobs/route.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { createConversionJob } from \"@/services/api\";\n\nexport async function POST(req: NextRequest) {\n  try {\n    const json = await req.json();\n    const job = await createConversionJob(json);\n    return Response.json(job, { status: 200 });\n  } catch (err) {\n    const message = err instanceof Error ? err.message : 'Unknown error';\n    return Response.json({ error: message }, { status: 400 });\n  }\n}\n"],"names":[],"mappings":";;;;AACA;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,MAAM,MAAM,IAAA,wIAAmB,EAAC;QACtC,OAAO,SAAS,IAAI,CAAC,KAAK;YAAE,QAAQ;QAAI;IAC1C,EAAE,OAAO,KAAK;QACZ,MAAM,UAAU,eAAe,QAAQ,IAAI,OAAO,GAAG;QACrD,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAQ,GAAG;YAAE,QAAQ;QAAI;IACzD;AACF","debugId":null}}]
}